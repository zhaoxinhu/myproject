<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>


    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
        <!--<property name="url" value="${jdbctwo.url}"/>-->
        <!--<property name="username" value="${jdbctwo.username}"/>-->
        <!--<property name="password" value="${jdbctwo.password}"/>-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="2"/>-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="50"/>-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="1"/>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000"/>-->

        <!--&lt;!&ndash; <property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="${validationQuery}" />&ndash;&gt;-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="25200000"/>-->
        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="20"/>-->
    <!--</bean>-->
    <!--<bean id="dataSourceRemote" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
        <!--<property name="url" value="${jdbc.url}"/>-->
        <!--<property name="username" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="2"/>-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="50"/>-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="1"/>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000"/>-->

        <!--&lt;!&ndash; <property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="validationQuery" value="${validationQuery}" />&ndash;&gt;-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="25200000"/>-->
        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="20"/>-->
    <!--</bean>-->
    <bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="maxPoolSize" value="30"/>
        <property name="initialPoolSize" value="10"></property>
        <property name="minPoolSize" value="10"/>
        <property name="autoCommitOnClose" value="false"/>
        <property name="checkoutTimeout" value="1000"/>
        <property name="acquireRetryAttempts" value="10"/>
    </bean>
    <bean id="dataSource" parent="parentDataSource">
        <property name="jdbcUrl" value="${jdbctwo.url}"/>
        <property name="user" value="${jdbctwo.username}"/>
        <property name="password" value="${jdbctwo.password}"/>
    </bean>

    <bean id="dataSourceRemote" parent="parentDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--<bean id="dynamicDataSource" class="org.myproject.util.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--&lt;!&ndash;<entry key="dataSource" value-ref="dataSource"></entry>&ndash;&gt;-->
                <!--<entry key="dataSourceRemote" value-ref="dataSourceRemote"></entry>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="defaultTargetDataSource" ref="dataSource"></property>-->
    <!--</bean>-->
    <!-- 2:配置sqlsessionFactory对象 -->
    <bean id="sqlSessionFactoryNew" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mybatis全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="${mybatis.location}"/>
        <!-- 扫描entity包，使用别名 -->
        <property name="typeAliasesPackage" value="org.myproject.pojo"/>
        <!-- 扫描sql配置文件：mapper -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--<property name="mapperLocations">-->
            <!--<array>-->
                <!--<value>classpath:mapper/*.xml</value>-->
                <!--<value>classpath:mapperRemote/UserRemote.xml</value>-->
            <!--</array>-->
        <!--</property>-->
    </bean>

    <bean id="sqlSessionFactoryRemote" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSourceRemote"/>
        <!-- 配置mybatis全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="${mybatis.location}"/>
        <!-- 扫描entity包，使用别名 -->
        <property name="typeAliasesPackage" value="org.myproject.remotepojo"/>
        <!-- 扫描sql配置文件：mapper -->
        <property name="mapperLocations" value="classpath:mapperRemote/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.myproject.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryNew"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.myproject.remotedao">
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryRemote"></property>
    </bean>


</beans>